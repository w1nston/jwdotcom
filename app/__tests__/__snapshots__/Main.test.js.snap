exports[`test that the Main routes are rendered correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <BrowserRouter>
    <div>
        <section
            className="navigation-container">
            <img
                className="navigation-container__jw-logo"
                src="public/assets/images/jwlogo.svg" />
            <nav
                className="navigation-container__nav">
                <Link
                    activeClassName=""
                    activeOnlyWhenExact={false}
                    activeStyle={Object {}}
                    className=""
                    isActive={[Function]}
                    replace={false}
                    style={Object {}}
                    to="/">
                    Home
                </function Link() {
                    var _temp, _this, _ret;
                
                    _classCallCheck(this, Link);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                      if (_this.props.onClick) _this.props.onClick(event);
                
                      if (!event.defaultPrevented && // onClick prevented default
                      !_this.props.target && // let browser handle "target=_blank" etc.
                      !isModifiedEvent(event) && isLeftClickEvent(event)) {
                        event.preventDefault();
                        _this.handleTransition();
                      }
                    }, _this.handleTransition = function () {
                      var router = _this.context.router;
                      var _this$props = _this.props;
                      var to = _this$props.to;
                      var replace = _this$props.replace;
                
                      var navigate = replace ? router.replaceWith : router.transitionTo;
                      navigate(to);
                    }, _temp), _possibleConstructorReturn(_this, _ret);
                  }>
                <Link
                    activeClassName=""
                    activeOnlyWhenExact={false}
                    activeStyle={Object {}}
                    className=""
                    isActive={[Function]}
                    replace={false}
                    style={Object {}}
                    to="/blog">
                    Blog
                </function Link() {
                    var _temp, _this, _ret;
                
                    _classCallCheck(this, Link);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                      if (_this.props.onClick) _this.props.onClick(event);
                
                      if (!event.defaultPrevented && // onClick prevented default
                      !_this.props.target && // let browser handle "target=_blank" etc.
                      !isModifiedEvent(event) && isLeftClickEvent(event)) {
                        event.preventDefault();
                        _this.handleTransition();
                      }
                    }, _this.handleTransition = function () {
                      var router = _this.context.router;
                      var _this$props = _this.props;
                      var to = _this$props.to;
                      var replace = _this$props.replace;
                
                      var navigate = replace ? router.replaceWith : router.transitionTo;
                      navigate(to);
                    }, _temp), _possibleConstructorReturn(_this, _ret);
                  }>
            </nav>
        </section>
        <section
            className="main-content-container">
            <Match
                component={[Function]}
                exactly={true}
                pattern="/" />
            <Match
                component={[Function]}
                exactly={false}
                pattern="/blog" />
        </section>
    </div>
</function BrowserRouter(_ref) {
  var basename = _ref.basename;
  var forceRefresh = _ref.forceRefresh;
  var getUserConfirmation = _ref.getUserConfirmation;
  var keyLength = _ref.keyLength;

  var routerProps = _objectWithoutProperties(_ref, ['basename', 'forceRefresh', 'getUserConfirmation', 'keyLength']);

  return _react2.default.createElement(
    _History2.default,
    {
      createHistory: _createBrowserHistory2.default,
      historyOptions: {
        basename: basename,
        forceRefresh: forceRefresh,
        getUserConfirmation: getUserConfirmation,
        keyLength: keyLength
      }
    },
    function (_ref2) {
      var history = _ref2.history;
      var action = _ref2.action;
      var location = _ref2.location;
      return _react2.default.createElement(_StaticRouter2.default, _extends({
        action: action,
        location: location,
        basename: basename,
        onPush: history.push,
        onReplace: history.replace,
        blockTransitions: history.block
      }, routerProps));
    }
  );
}>,
  "nodes": Array [
    <BrowserRouter>
      <div>
            <section
                  className="navigation-container">
                  <img
                        className="navigation-container__jw-logo"
                        src="public/assets/images/jwlogo.svg" />
                  <nav
                        className="navigation-container__nav">
                        <Link
                              activeClassName=""
                              activeOnlyWhenExact={false}
                              activeStyle={Object {}}
                              className=""
                              isActive={[Function]}
                              replace={false}
                              style={Object {}}
                              to="/">
                              Home
                        </function Link() {
                            var _temp, _this, _ret;
                        
                            _classCallCheck(this, Link);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                              if (_this.props.onClick) _this.props.onClick(event);
                        
                              if (!event.defaultPrevented && // onClick prevented default
                              !_this.props.target && // let browser handle "target=_blank" etc.
                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                event.preventDefault();
                                _this.handleTransition();
                              }
                            }, _this.handleTransition = function () {
                              var router = _this.context.router;
                              var _this$props = _this.props;
                              var to = _this$props.to;
                              var replace = _this$props.replace;
                        
                              var navigate = replace ? router.replaceWith : router.transitionTo;
                              navigate(to);
                            }, _temp), _possibleConstructorReturn(_this, _ret);
                          }>
                        <Link
                              activeClassName=""
                              activeOnlyWhenExact={false}
                              activeStyle={Object {}}
                              className=""
                              isActive={[Function]}
                              replace={false}
                              style={Object {}}
                              to="/blog">
                              Blog
                        </function Link() {
                            var _temp, _this, _ret;
                        
                            _classCallCheck(this, Link);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                              if (_this.props.onClick) _this.props.onClick(event);
                        
                              if (!event.defaultPrevented && // onClick prevented default
                              !_this.props.target && // let browser handle "target=_blank" etc.
                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                event.preventDefault();
                                _this.handleTransition();
                              }
                            }, _this.handleTransition = function () {
                              var router = _this.context.router;
                              var _this$props = _this.props;
                              var to = _this$props.to;
                              var replace = _this$props.replace;
                        
                              var navigate = replace ? router.replaceWith : router.transitionTo;
                              navigate(to);
                            }, _temp), _possibleConstructorReturn(_this, _ret);
                          }>
                  </nav>
            </section>
            <section
                  className="main-content-container">
                  <Match
                        component={[Function]}
                        exactly={true}
                        pattern="/" />
                  <Match
                        component={[Function]}
                        exactly={false}
                        pattern="/blog" />
            </section>
      </div>
</function BrowserRouter(_ref) {
  var basename = _ref.basename;
  var forceRefresh = _ref.forceRefresh;
  var getUserConfirmation = _ref.getUserConfirmation;
  var keyLength = _ref.keyLength;

  var routerProps = _objectWithoutProperties(_ref, ['basename', 'forceRefresh', 'getUserConfirmation', 'keyLength']);

  return _react2.default.createElement(
    _History2.default,
    {
      createHistory: _createBrowserHistory2.default,
      historyOptions: {
        basename: basename,
        forceRefresh: forceRefresh,
        getUserConfirmation: getUserConfirmation,
        keyLength: keyLength
      }
    },
    function (_ref2) {
      var history = _ref2.history;
      var action = _ref2.action;
      var location = _ref2.location;
      return _react2.default.createElement(_StaticRouter2.default, _extends({
        action: action,
        location: location,
        basename: basename,
        onPush: history.push,
        onReplace: history.replace,
        blockTransitions: history.block
      }, routerProps));
    }
  );
}>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Main />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <BrowserRouter>
          <div>
                    <section
                              className="navigation-container">
                              <img
                                        className="navigation-container__jw-logo"
                                        src="public/assets/images/jwlogo.svg" />
                              <nav
                                        className="navigation-container__nav">
                                        <Link
                                                  activeClassName=""
                                                  activeOnlyWhenExact={false}
                                                  activeStyle={Object {}}
                                                  className=""
                                                  isActive={[Function]}
                                                  replace={false}
                                                  style={Object {}}
                                                  to="/">
                                                  Home
                                        </function Link() {
                                            var _temp, _this, _ret;
                                        
                                            _classCallCheck(this, Link);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                                              if (_this.props.onClick) _this.props.onClick(event);
                                        
                                              if (!event.defaultPrevented && // onClick prevented default
                                              !_this.props.target && // let browser handle "target=_blank" etc.
                                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                                event.preventDefault();
                                                _this.handleTransition();
                                              }
                                            }, _this.handleTransition = function () {
                                              var router = _this.context.router;
                                              var _this$props = _this.props;
                                              var to = _this$props.to;
                                              var replace = _this$props.replace;
                                        
                                              var navigate = replace ? router.replaceWith : router.transitionTo;
                                              navigate(to);
                                            }, _temp), _possibleConstructorReturn(_this, _ret);
                                          }>
                                        <Link
                                                  activeClassName=""
                                                  activeOnlyWhenExact={false}
                                                  activeStyle={Object {}}
                                                  className=""
                                                  isActive={[Function]}
                                                  replace={false}
                                                  style={Object {}}
                                                  to="/blog">
                                                  Blog
                                        </function Link() {
                                            var _temp, _this, _ret;
                                        
                                            _classCallCheck(this, Link);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                                              if (_this.props.onClick) _this.props.onClick(event);
                                        
                                              if (!event.defaultPrevented && // onClick prevented default
                                              !_this.props.target && // let browser handle "target=_blank" etc.
                                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                                event.preventDefault();
                                                _this.handleTransition();
                                              }
                                            }, _this.handleTransition = function () {
                                              var router = _this.context.router;
                                              var _this$props = _this.props;
                                              var to = _this$props.to;
                                              var replace = _this$props.replace;
                                        
                                              var navigate = replace ? router.replaceWith : router.transitionTo;
                                              navigate(to);
                                            }, _temp), _possibleConstructorReturn(_this, _ret);
                                          }>
                              </nav>
                    </section>
                    <section
                              className="main-content-container">
                              <Match
                                        component={[Function]}
                                        exactly={true}
                                        pattern="/" />
                              <Match
                                        component={[Function]}
                                        exactly={false}
                                        pattern="/blog" />
                    </section>
          </div>
</function BrowserRouter(_ref) {
  var basename = _ref.basename;
  var forceRefresh = _ref.forceRefresh;
  var getUserConfirmation = _ref.getUserConfirmation;
  var keyLength = _ref.keyLength;

  var routerProps = _objectWithoutProperties(_ref, ['basename', 'forceRefresh', 'getUserConfirmation', 'keyLength']);

  return _react2.default.createElement(
    _History2.default,
    {
      createHistory: _createBrowserHistory2.default,
      historyOptions: {
        basename: basename,
        forceRefresh: forceRefresh,
        getUserConfirmation: getUserConfirmation,
        keyLength: keyLength
      }
    },
    function (_ref2) {
      var history = _ref2.history;
      var action = _ref2.action;
      var location = _ref2.location;
      return _react2.default.createElement(_StaticRouter2.default, _extends({
        action: action,
        location: location,
        basename: basename,
        onPush: history.push,
        onReplace: history.replace,
        blockTransitions: history.block
      }, routerProps));
    }
  );
}>,
        "_debugID": 2,
        "_renderedOutput": <BrowserRouter>
          <div>
                    <section
                              className="navigation-container">
                              <img
                                        className="navigation-container__jw-logo"
                                        src="public/assets/images/jwlogo.svg" />
                              <nav
                                        className="navigation-container__nav">
                                        <Link
                                                  activeClassName=""
                                                  activeOnlyWhenExact={false}
                                                  activeStyle={Object {}}
                                                  className=""
                                                  isActive={[Function]}
                                                  replace={false}
                                                  style={Object {}}
                                                  to="/">
                                                  Home
                                        </function Link() {
                                            var _temp, _this, _ret;
                                        
                                            _classCallCheck(this, Link);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                                              if (_this.props.onClick) _this.props.onClick(event);
                                        
                                              if (!event.defaultPrevented && // onClick prevented default
                                              !_this.props.target && // let browser handle "target=_blank" etc.
                                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                                event.preventDefault();
                                                _this.handleTransition();
                                              }
                                            }, _this.handleTransition = function () {
                                              var router = _this.context.router;
                                              var _this$props = _this.props;
                                              var to = _this$props.to;
                                              var replace = _this$props.replace;
                                        
                                              var navigate = replace ? router.replaceWith : router.transitionTo;
                                              navigate(to);
                                            }, _temp), _possibleConstructorReturn(_this, _ret);
                                          }>
                                        <Link
                                                  activeClassName=""
                                                  activeOnlyWhenExact={false}
                                                  activeStyle={Object {}}
                                                  className=""
                                                  isActive={[Function]}
                                                  replace={false}
                                                  style={Object {}}
                                                  to="/blog">
                                                  Blog
                                        </function Link() {
                                            var _temp, _this, _ret;
                                        
                                            _classCallCheck(this, Link);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
                                              if (_this.props.onClick) _this.props.onClick(event);
                                        
                                              if (!event.defaultPrevented && // onClick prevented default
                                              !_this.props.target && // let browser handle "target=_blank" etc.
                                              !isModifiedEvent(event) && isLeftClickEvent(event)) {
                                                event.preventDefault();
                                                _this.handleTransition();
                                              }
                                            }, _this.handleTransition = function () {
                                              var router = _this.context.router;
                                              var _this$props = _this.props;
                                              var to = _this$props.to;
                                              var replace = _this$props.replace;
                                        
                                              var navigate = replace ? router.replaceWith : router.transitionTo;
                                              navigate(to);
                                            }, _temp), _possibleConstructorReturn(_this, _ret);
                                          }>
                              </nav>
                    </section>
                    <section
                              className="main-content-container">
                              <Match
                                        component={[Function]}
                                        exactly={true}
                                        pattern="/" />
                              <Match
                                        component={[Function]}
                                        exactly={false}
                                        pattern="/blog" />
                    </section>
          </div>
</function BrowserRouter(_ref) {
  var basename = _ref.basename;
  var forceRefresh = _ref.forceRefresh;
  var getUserConfirmation = _ref.getUserConfirmation;
  var keyLength = _ref.keyLength;

  var routerProps = _objectWithoutProperties(_ref, ['basename', 'forceRefresh', 'getUserConfirmation', 'keyLength']);

  return _react2.default.createElement(
    _History2.default,
    {
      createHistory: _createBrowserHistory2.default,
      historyOptions: {
        basename: basename,
        forceRefresh: forceRefresh,
        getUserConfirmation: getUserConfirmation,
        keyLength: keyLength
      }
    },
    function (_ref2) {
      var history = _ref2.history;
      var action = _ref2.action;
      var location = _ref2.location;
      return _react2.default.createElement(_StaticRouter2.default, _extends({
        action: action,
        location: location,
        basename: basename,
        onPush: history.push,
        onReplace: history.replace,
        blockTransitions: history.block
      }, routerProps));
    }
  );
}>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Main />,
}
`;
